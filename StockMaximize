ðŸ“Œ Question :

Your algorithms have become so good at predicting the market that you now know what the share price of Wooden Orange Toothpicks Inc. (WOT) will be for the next number of days.

Each day, you can either buy one share of WOT, sell any number of shares of WOT that you own, or not make any transaction at all. What is the maximum profit you can obtain with an optimum trading strategy?

ðŸ“Œ Explanation:

In this program, I first create a dp array and a variable called max, and initialize it to the last element of the prices list. I then take a for loop which starts from the last element and goes to the first element. In each iteration, I check if the element in the ith position is greater than max. If it is, I assign that element as max and then assign max to the ith position of the dp array.

After that, I take a variable called sum and then take another for a loop. In this loop, I subtract the prices of the ith element from the dp of the ith element and add it to the sum variable. At last, I return the sum.

ðŸ“Œ Example:
ðŸ“Œ Input:

4
1 2 3 4
5
5 4 3 4 5

ðŸ“Œ Output:

6
4




import java.io.*;
import java.util.*;
import java.util.stream.*;
import static java.util.stream.Collectors.toList;

public class StockMaximize {

    public static long stockmax(List<Integer> prices) {
        int n = prices.size();
        int[] dp = new int[n];
        int max = prices.get(n - 1);
        for (int i = n - 1; i >= 0; i--) {
            max = (prices.get(i) > max) ? prices.get(i) : max;
            dp[i] = max;
        }
        long sum = 0;
        for (int i = 0; i < n; i++) {
            sum += (dp[i] - prices.get(i));
        }
        return sum;
    }

}

class StockMaximize_exe {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int t = Integer.parseInt(bufferedReader.readLine().trim());

        IntStream.range(0, t).forEach(tItr -> {
            try {
                int n = Integer.parseInt(bufferedReader.readLine().trim());

                List<Integer> prices = Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
                        .map(Integer::parseInt)
                        .collect(toList());

                long result = StockMaximize.stockmax(prices);

                bufferedWriter.write(String.valueOf(result));
                bufferedWriter.newLine();
            } catch (IOException ex) {
                throw new RuntimeException(ex);
            }
        });

        bufferedReader.close();
        bufferedWriter.close();
    }
}
